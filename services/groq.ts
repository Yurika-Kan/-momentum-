import Groq from "groq-sdk";
import { getProject, getMentors } from "./user.service";

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

export async function findMentorMatch(projectId: number): Promise<string> {
    try {
        const project = await getProject(projectId);
        const mentors = await getMentors();

        // Handle the case where project or mentors are not found
        if (!project || !mentors.length) {
            throw new Error('Project or mentors not found');
        }

        // prompt
        const matchPrompt = `
            Given the project details below, match the best mentor from the list and and return only that Mentors name as a string:
            Project: Name: ${project.title}, Tech Stack: ${project.tags.join(', ')}, Duration: ${project.duration}.
            Mentors: ${mentors.map(m => `Name: ${m.username}, Tech Stack: ${m.tags.join(', ')}`).join(', ')}.
            Who is the best mentor for this project?
        `;

        // req to groq api
        const response = await groq.chat.completions.create({
            model: "llama-3.3-70b-versatile", // Specify the model
            messages: [
                { role: 'system', content: 'You are a helpful assistant.' },
                { role: 'user', content: matchPrompt },
            ],
        });

        // Extract and return the assistant's response
        return response.choices[0].message.content;
    } catch (error) {
        console.error('Error matching mentor:', error);
        throw new Error('Failed to fetch best mentor from Groq API');
    }
}

/**
 * Calls the OpenAI ChatGPT API with a user-provided prompt.
 * @param {string} prompt - The user's message to send to ChatGPT.
 * @returns {Promise<string>} - The response generated by ChatGPT.
 
export async function getChatGPTResponse(prompt: string): Promise<string> {
    try {
        // Make a request to OpenAI's API
        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
                { role: "system", content: "You are a helpful assistant." },
                { role: "user", content: "Write a haiku about recursion in programming."},
            ],
            store: true,
        });
        // Return the AI's response content
        return completion.choices[0].message.content ?? '';
    } catch (error) {
        console.error("ChatGPT API error:", error);
        throw new Error("Failed to fetch response from ChatGPT");
    }
}*/
