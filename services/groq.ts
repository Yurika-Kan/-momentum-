import Groq from "groq-sdk";

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

export async function findMentorMatch(projectId: number): Promise<string> {
    try {
        // call service folder --> prisma - find project details
        //const project = await placeholder.findProject(projectId);
<<<<<<< Updated upstream
    
=======

>>>>>>> Stashed changes
        // const mentors = await prisma.mentor.findMany()

        // prompt
        const matchPrompt = `
            Given the project details below, match the best mentor from the list and return in a json format:
            Project: Name: ${project.name}, Tech Stack: ${project.techStack}, Specialty: ${project.specialty}.
            Mentors: ${mentors.map(m => `Name: ${m.name}, Tech Stack: ${m.techStack}, Specialty: ${m.specialty}`).join(', ')}.
            Who is the best mentor for this project?
        `;

        // req to groq api
        const response = await groq.chat.completions.create({
            model: "llama-3.3-70b-versatile", // Specify the model
            messages: [
                { role: 'system', content: 'You are a helpful assistant.' },
                { role: 'user', content: groqPrompt },
            ],
        });

        // Extract and return the assistant's response
        return response.choices[0].message.content;
    } catch (error) {
        console.error('Error matching mentor:', error);
        throw new Error('Failed to fetch best mentor from Groq API');
    }
}

/**
 * Calls the OpenAI ChatGPT API with a user-provided prompt.
 * @param {string} prompt - The user's message to send to ChatGPT.
 * @returns {Promise<string>} - The response generated by ChatGPT.
 
export async function getChatGPTResponse(prompt: string): Promise<string> {
    try {
        // Make a request to OpenAI's API
        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
                { role: "system", content: "You are a helpful assistant." },
                { role: "user", content: "Write a haiku about recursion in programming."},
            ],
            store: true,
        });
        // Return the AI's response content
        return completion.choices[0].message.content ?? '';
    } catch (error) {
        console.error("ChatGPT API error:", error);
        throw new Error("Failed to fetch response from ChatGPT");
    }
}*/
